// This software is part of github.com/waynebhayes/libwayne, and is Copyright(C) Wayne B. Hayes 2025, under the GNU LGPL 3.0
// (GNU Lesser General Public License, version 3, 2007), a copy of which is contained at the top of the repo.
#include "LocalMeasure.hpp"
#include <vector>
#include <iostream>
#include "../../utils/FileIO.hpp"

using namespace std;

//is this folder actually ever used? -Nil
const string LocalMeasure::autogenMatricesFolder = "autogenerated/matrices/";

LocalMeasure::LocalMeasure(const Graph* G1, const Graph* G2, const string& name) : Measure(G1, G2, name) {
    FileIO::createFolder(autogenMatricesFolder);
}

LocalMeasure::~LocalMeasure() {
}

double LocalMeasure::eval(const Alignment& A) {
    uint n = G1->getNumNodes();
    double similaritySum = 0;
    for (uint i = 0; i < n; i++) {
        similaritySum += sims[i][A[i]];
    }
    return similaritySum/n;
}

bool LocalMeasure::isLocal() {
    return true;
}

vector<vector<float>>* LocalMeasure::getSimMatrix() {
    return &sims;
}

void LocalMeasure::loadBinSimMatrix(string simMatrixFileName) {
    cout << "Computing " << simMatrixFileName << " ... ";
    Timer T;
    T.start();
    initSimMatrix();
    cout << "Loading binary sim matrix done (" << T.elapsedString() << ")" << endl;
}

void LocalMeasure::writeSimsWithNames(string outfile) {
    ofstream fout(outfile);
    for (uint i = 0; i < G1->getNumNodes(); i++) {
        for (uint j = 0; j < G2->getNumNodes(); j++) {
            fout << G1->getNodeName(i) << " " << G2->getNodeName(j) << " " << sims[i][j] << endl;
        }
    }
}

//outputs the weight this measure should be multiplied by to scale kind of close to 0 through 1
double LocalMeasure::balanceWeight(){
    double totalSim = 0;
    uint simNumber = 0;
    for(uint i = 0; i < sims.size(); i++){
        for(uint j = 0; j < sims[i].size(); j++){
            totalSim += sims[i][j];
            simNumber++;
        }
    }
    double averageSim = totalSim/simNumber;
    return .5/averageSim; //average sim is scaled to one half
}
